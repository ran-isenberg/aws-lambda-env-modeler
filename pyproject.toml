[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "aws_lambda_env_modeler"
version = "2.0.1"
description = "AWS-Lambda-Env-Modeler is a Python library designed to simplify the process of managing and validating environment variables in your AWS Lambda functions."
authors = [{ name = "Ran Isenberg" }]
requires-python = ">=3.9.0,<4"
readme = "README.md"
license = "MIT-0"
keywords = [
    "environment variables parser",
    "aws lambda",
    "serverless best practices",
    "aws serverless",
    "lambda environment variables",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
dependencies = ["pydantic>=2.0.0,<3"]

[project.urls]
Repository = "https://github.com/ran-isenberg/aws-lambda-env-modeler"
"Issue tracker" = "https://github.com/ran-isenberg/aws-lambda-env-modeler/issues"
Releases = "https://github.com/ran-isenberg/aws-lambda-env-modeler/releases"

[dependency-groups]
dev = [
    "pytest",
    "pytest-mock",
    "pycodestyle",
    "pytest-cov",
    "pytest-html",
    "python-dateutil",
    "python-dotenv",
    "GitPython",
    "radon",
    "xenon",
    "pre-commit",
    "ruff",
    "mkdocs-material",
    "mkdocs-git-revision-date-plugin",
    "types-cachetools",
    "mypy",
    "types-requests",
    "toml",
    "wheel",
    "setuptools",
]

[tool.hatch.build.targets.sdist]
include = ["aws_lambda_env_modeler"]

[tool.hatch.build.targets.wheel]
include = ["aws_lambda_env_modeler"]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "cdk.out",
    ".vscode",
    ".pytest_cache",
    ".build",
    ".mypy_cache",
    ".github"
]

# Same as Black.
line-length = 150
indent-width = 4

# Assume Python 3.13
target-version = "py313"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
]
ignore = [ "E203", "E266", "E501", "W191"]

[tool.ruff.format]
quote-style = "single"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.isort]
known-third-party = ["pydantic", "aws_lambda_powertools"]
